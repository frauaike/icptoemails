"""update models

Revision ID: 4e4f7cda0068
Revises: 771943851c46
Create Date: 2025-03-29 16:06:35.453994

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4e4f7cda0068'
down_revision: Union[str, None] = '771943851c46'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('details', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_table('email_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('email_content', sa.Text(), nullable=False),
    sa.Column('analysis_result', sa.Text(), nullable=True),
    sa.Column('sentiment_score', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_email_analyses_id'), 'email_analyses', ['id'], unique=False)
    op.add_column('icps', sa.Column('description', sa.Text(), nullable=True))
    op.drop_index('idx_icp_company_size', table_name='icps')
    op.drop_index('idx_icp_industry', table_name='icps')
    op.drop_index('idx_icp_user_id', table_name='icps')
    op.drop_column('icps', 'key_metrics')
    op.drop_column('icps', 'budget_range')
    op.drop_column('icps', 'decision_making_process')
    op.drop_column('icps', 'persona_responsibilities')
    op.drop_column('icps', 'pain_points')
    op.drop_column('icps', 'persona_title')
    op.drop_column('icps', 'goals')
    op.add_column('subscriptions', sa.Column('plan_name', sa.String(), nullable=False))
    op.add_column('subscriptions', sa.Column('stripe_subscription_id', sa.String(), nullable=True))
    op.add_column('subscriptions', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('subscriptions', sa.Column('start_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    op.add_column('subscriptions', sa.Column('end_date', sa.DateTime(timezone=True), nullable=True))
    op.execute('ALTER TABLE subscriptions ALTER COLUMN id TYPE INTEGER USING id::integer')
    op.drop_index('idx_subscription_plan', table_name='subscriptions')
    op.create_index('idx_subscription_plan', 'subscriptions', ['plan_name'], unique=False)
    op.create_index(op.f('ix_subscriptions_id'), 'subscriptions', ['id'], unique=False)
    op.create_unique_constraint(None, 'subscriptions', ['stripe_subscription_id'])
    op.drop_column('subscriptions', 'status')
    op.drop_column('subscriptions', 'current_period_start')
    op.drop_column('subscriptions', 'current_month_icp_count')
    op.drop_column('subscriptions', 'last_billing_date')
    op.drop_column('subscriptions', 'cancel_at_period_end')
    op.drop_column('subscriptions', 'current_period_end')
    op.drop_column('subscriptions', 'plan')
    op.drop_column('subscriptions', 'current_month_email_analysis_count')
    op.drop_column('subscriptions', 'monthly_email_analysis_limit')
    op.drop_column('subscriptions', 'monthly_icp_limit')
    op.drop_column('subscriptions', 'trial_start')
    op.drop_column('subscriptions', 'monthly_analysis_count')
    op.drop_column('subscriptions', 'trial_end')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('subscriptions', sa.Column('trial_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('monthly_analysis_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('trial_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('monthly_icp_limit', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('subscriptions', sa.Column('monthly_email_analysis_limit', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('subscriptions', sa.Column('current_month_email_analysis_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('plan', postgresql.ENUM('free', 'pro', name='subscriptionplan'), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('current_period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('subscriptions', sa.Column('cancel_at_period_end', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('last_billing_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('current_month_icp_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('current_period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('subscriptions', sa.Column('status', postgresql.ENUM('active', 'past_due', 'canceled', 'trialing', 'unpaid', name='subscriptionstatus'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'subscriptions', type_='unique')
    op.drop_index(op.f('ix_subscriptions_id'), table_name='subscriptions')
    op.drop_index('idx_subscription_plan', table_name='subscriptions')
    op.create_index('idx_subscription_plan', 'subscriptions', ['plan'], unique=False)
    op.create_index('idx_subscription_status', 'subscriptions', ['status'], unique=False)
    op.execute('ALTER TABLE subscriptions ALTER COLUMN id TYPE VARCHAR USING id::varchar')
    op.drop_column('subscriptions', 'end_date')
    op.drop_column('subscriptions', 'start_date')
    op.drop_column('subscriptions', 'is_active')
    op.drop_column('subscriptions', 'stripe_subscription_id')
    op.drop_column('subscriptions', 'plan_name')
    op.add_column('icps', sa.Column('goals', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('icps', sa.Column('persona_title', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('icps', sa.Column('pain_points', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('icps', sa.Column('persona_responsibilities', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('icps', sa.Column('decision_making_process', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('icps', sa.Column('budget_range', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('icps', sa.Column('key_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index('idx_icp_user_id', 'icps', ['user_id'], unique=False)
    op.create_index('idx_icp_industry', 'icps', ['industry'], unique=False)
    op.create_index('idx_icp_company_size', 'icps', ['company_size'], unique=False)
    op.drop_column('icps', 'description')
    op.drop_index(op.f('ix_email_analyses_id'), table_name='email_analyses')
    op.drop_table('email_analyses')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ### 