"""fix timestamp columns with timezone + defaults

Revision ID: 771943851c46
Revises: 001
Create Date: 2025-03-29 15:25:09.016261

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '771943851c46'
down_revision: Union[str, None] = '001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('icp_responses',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('icp_id', sa.Integer(), nullable=False),
    sa.Column('questionnaire_version', sa.String(), nullable=False),
    sa.Column('responses', sa.JSON(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('score', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['icp_id'], ['icps.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_icp_response_status', 'icp_responses', ['status'], unique=False)
    op.create_index('idx_icp_response_user_id', 'icp_responses', ['user_id'], unique=False)
    op.create_index('idx_icp_response_version', 'icp_responses', ['questionnaire_version'], unique=False)
    op.drop_table('email_analyses')
    op.drop_table('audit_logs')
    op.add_column('icps', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('icps', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('icps', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index('idx_icp_company_size', 'icps', ['company_size'], unique=False)
    op.create_index('idx_icp_industry', 'icps', ['industry'], unique=False)
    op.create_index('idx_icp_user_id', 'icps', ['user_id'], unique=False)
    op.create_index(op.f('ix_icps_id'), 'icps', ['id'], unique=False)
    op.add_column('subscriptions', sa.Column('monthly_icp_limit', sa.Integer(), nullable=False))
    op.add_column('subscriptions', sa.Column('monthly_email_analysis_limit', sa.Integer(), nullable=False))
    op.add_column('subscriptions', sa.Column('current_month_icp_count', sa.Integer(), nullable=True))
    op.add_column('subscriptions', sa.Column('current_month_email_analysis_count', sa.Integer(), nullable=True))
    op.add_column('subscriptions', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('subscriptions', 'id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('subscriptions', 'current_period_start',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('subscriptions', 'current_period_end',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('subscriptions', 'last_billing_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('subscriptions', 'trial_start',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('subscriptions', 'trial_end',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('subscriptions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subscriptions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index('ix_subscriptions_stripe_customer_id', table_name='subscriptions')
    op.drop_index('ix_subscriptions_stripe_subscription_id', table_name='subscriptions')
    op.create_index('idx_subscription_plan', 'subscriptions', ['plan'], unique=False)
    op.create_index('idx_subscription_status', 'subscriptions', ['status'], unique=False)
    op.create_index('idx_subscription_user_id', 'subscriptions', ['user_id'], unique=False)
    op.drop_column('subscriptions', 'stripe_customer_id')
    op.drop_column('subscriptions', 'stripe_subscription_id')
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('is_superuser', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'last_login',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'consent_timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'consent_timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'last_login',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'is_active')
    op.add_column('subscriptions', sa.Column('stripe_subscription_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('subscriptions', sa.Column('stripe_customer_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index('idx_subscription_user_id', table_name='subscriptions')
    op.drop_index('idx_subscription_status', table_name='subscriptions')
    op.drop_index('idx_subscription_plan', table_name='subscriptions')
    op.create_index('ix_subscriptions_stripe_subscription_id', 'subscriptions', ['stripe_subscription_id'], unique=True)
    op.create_index('ix_subscriptions_stripe_customer_id', 'subscriptions', ['stripe_customer_id'], unique=True)
    op.alter_column('subscriptions', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subscriptions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subscriptions', 'trial_end',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('subscriptions', 'trial_start',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('subscriptions', 'last_billing_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('subscriptions', 'current_period_end',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('subscriptions', 'current_period_start',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('subscriptions', 'id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('subscriptions', 'deleted_at')
    op.drop_column('subscriptions', 'current_month_email_analysis_count')
    op.drop_column('subscriptions', 'current_month_icp_count')
    op.drop_column('subscriptions', 'monthly_email_analysis_limit')
    op.drop_column('subscriptions', 'monthly_icp_limit')
    op.drop_index(op.f('ix_icps_id'), table_name='icps')
    op.drop_index('idx_icp_user_id', table_name='icps')
    op.drop_index('idx_icp_industry', table_name='icps')
    op.drop_index('idx_icp_company_size', table_name='icps')
    op.alter_column('icps', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('icps', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('icps', 'deleted_at')
    op.create_table('audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('action', postgresql.ENUM('create', 'read', 'update', 'delete', 'login', 'logout', 'password_change', 'mfa_enable', 'mfa_disable', 'subscription_change', 'data_export', 'data_delete', name='actiontype'), autoincrement=False, nullable=False),
    sa.Column('resource_type', postgresql.ENUM('user', 'icp', 'email_analysis', 'subscription', 'system', name='resourcetype'), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('additional_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_table('email_analyses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('icp_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('suggested_rewrite', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('feedback', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('strengths', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('weaknesses', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('improvement_suggestions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('icp_alignment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('persona_match_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pain_point_addressal', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['icp_id'], ['icps.id'], name='email_analyses_icp_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='email_analyses_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='email_analyses_pkey')
    )
    op.drop_index('idx_icp_response_version', table_name='icp_responses')
    op.drop_index('idx_icp_response_user_id', table_name='icp_responses')
    op.drop_index('idx_icp_response_status', table_name='icp_responses')
    op.drop_table('icp_responses')
    # ### end Alembic commands ### 